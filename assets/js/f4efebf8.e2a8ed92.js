"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[795],{9335:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var a=r(7462),i=r(3366),n=(r(7294),r(3905)),o=["components"],s={sidebar_position:5},l="Custom Validators",u={unversionedId:"custom-validators",id:"custom-validators",isDocsHomePage:!1,title:"Custom Validators",description:"createValidator()",source:"@site/docs/custom-validators.md",sourceDirName:".",slug:"/custom-validators",permalink:"/super-validator/custom-validators",editUrl:"https://github.com/robert-harbison/super-validator/docs/custom-validators.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Built in Validators",permalink:"/super-validator/built-in-validators"},next:{title:"Addon Validators",permalink:"/super-validator/addon-validators"}},d=[{value:"createValidator()",id:"createvalidator",children:[{value:"Params",id:"params",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Basic Custom Validator",id:"basic-custom-validator",children:[]},{value:"Custom Validator With User Provided Message",id:"custom-validator-with-user-provided-message",children:[]},{value:"Custom Validator Multiple Errors",id:"custom-validator-multiple-errors",children:[]},{value:"Custom Validator With Parameters",id:"custom-validator-with-parameters",children:[]},{value:"Typescript",id:"typescript",children:[]}]}],m={toc:d};function c(e){var t=e.components,r=(0,i.Z)(e,o);return(0,n.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"custom-validators"},"Custom Validators"),(0,n.kt)("h2",{id:"createvalidator"},"createValidator()"),(0,n.kt)("p",null,"Creates a custom validator function that can be passed into a schema."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"createValidator(cb: (fieldKey: string, value: unknown) => ErrorReturnTypes, customMessage?: string)\n")),(0,n.kt)("h3",{id:"params"},"Params"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"cb"),(0,n.kt)("td",{parentName:"tr",align:null},"(fieldKey: string, value: unknown) => ErrorReturnTypes"),(0,n.kt)("td",{parentName:"tr",align:null},"A callback that gets called to validate a value. The fieldKey is the name of the field in the schema, the value is the value to validate. You can return any of the error types (null, string or string[])")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"customMessage"),(0,n.kt)("td",{parentName:"tr",align:null},"string, undefined"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the custom message to use if there is a error. It will override kind of error you return in the callback.")))),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("h3",{id:"basic-custom-validator"},"Basic Custom Validator"),(0,n.kt)("p",null,"This is the most basic way to create a custom validator however it has one main limitation of not using a user provided overriding error message. This will return a error if the value is true."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"import { createValidator } from \"super-validator\";\n\nexport const customValidator = () => createValidator((fieldKey, value) => {\n    // Validation Logic\n    if (value === true) {\n        return `This is a error for: '${fieldKey}'`; // If there is a error return a string. You can also use the fieldName in the error message.\n    }\n    return null; // If validation passes return null.\n});\n")),(0,n.kt)("h3",{id:"custom-validator-with-user-provided-message"},"Custom Validator With User Provided Message"),(0,n.kt)("p",null,"This allows a user to pass in a message when creating a schema. NOTE: This will override any error message(s) returned from the validator."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"import { createValidator } from \"super-validator\";\n\nexport const customValidator = (customMessage) => createValidator((fieldKey, value) => {\n    // Validation Logic\n    if (value === true) {\n        return `This is a error for: '${fieldKey}'`;\n    }\n    return null; // If validation passes return null.\n}, customMessage);\n")),(0,n.kt)("h3",{id:"custom-validator-multiple-errors"},"Custom Validator Multiple Errors"),(0,n.kt)("p",null,"To use return multiple errors you just need to return a array instead of a string for the error(s). It's important to note that in this example if a user passes a customMessage it will override any array you return and only return the provided string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'import { createValidator } from "super-validator";\n\nexport const customValidator = (customMessage) => createValidator((fieldKey, value) => {\n    const errors = [];\n    if (value === true) {\n        errors.push("This is a error!"); // Add this error to array.\n    }\n\n    if (value === true) {\n        errors.push("This is a 2nd error!"); // Add this 2nd error to array.\n    }\n    return errors; // Return the array if it is empty there are no errors.\n  }, customMessage);\n')),(0,n.kt)("h3",{id:"custom-validator-with-parameters"},"Custom Validator With Parameters"),(0,n.kt)("p",null,"You can also take in custom parameters when making a validator. In the below example you will pass in a number (n) that is used to check if the value is greater than n."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"import { createValidator } from \"super-validator\";\n\nexport const customValidator = (greaterThan, customMessage) => createValidator((fieldKey, value) => {\n    if (value <= greaterThan) {\n        return `'${fieldKey}' has to be greater than ${greaterThan}.`;\n    }\n    return null;\n}, customMessage);\n")),(0,n.kt)("h3",{id:"typescript"},"Typescript"),(0,n.kt)("p",null,"Here is a example of a validator in Typescript that will return a error if the value is less than the provided value."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'import { createValidator, ErrorReturnTypes, ValidatorFunction } from "super-validator";\n\nexport const min = (minValue: number, customMessage?: string): ValidatorFunction<number> =>\n    createValidator<number>((fieldKey: string, value: number): ErrorReturnTypes => {\n        if (value < minValue) {\n            return `${value} is less than ${minValue}`\n        }\n        return null\n    }, customMessage)\n')))}c.isMDXComponent=!0}}]);