"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[188],{3382:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return d},default:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],u={sidebar_position:4},s="Built in Validators",o={unversionedId:"built-in-validators",id:"built-in-validators",isDocsHomePage:!1,title:"Built in Validators",description:"Super validator only supplies a few basic validators. You can take a look into making your own or using addons for more validators.",source:"@site/docs/built-in-validators.md",sourceDirName:".",slug:"/built-in-validators",permalink:"/built-in-validators",editUrl:"https://github.com/robert-harbison/super-validator/docs/built-in-validators.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Schema Validation",permalink:"/schema-validation"},next:{title:"Custom Validators",permalink:"/custom-validators"}},d=[{value:"Required",id:"required",children:[{value:"Params",id:"params",children:[]}]},{value:"Min",id:"min",children:[{value:"Params",id:"params-1",children:[]},{value:"Notes",id:"notes",children:[]}]},{value:"Max",id:"max",children:[{value:"Params",id:"params-2",children:[]},{value:"Notes",id:"notes-1",children:[]}]},{value:"TypeOf",id:"typeof",children:[{value:"Params",id:"params-3",children:[]}]},{value:"Equals",id:"equals",children:[{value:"Params",id:"params-4",children:[]}]}],m={toc:d};function p(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"built-in-validators"},"Built in Validators"),(0,l.kt)("p",null,"Super validator only supplies a few basic validators. You can take a look into making your own or using addons for more validators."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"If you have suggestions for more validators please create a issue here.")),(0,l.kt)("h2",{id:"required"},"Required"),(0,l.kt)("p",null,"Makes a value required. This will fail if the value is equal to null or undefined."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { required } from 'super-validator'\n\nrequired()\n// Or\nrequired('Custom Error Message')\n")),(0,l.kt)("h3",{id:"params"},"Params"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customMessage"),(0,l.kt)("td",{parentName:"tr",align:null},"string, undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom message to override any validation errors.")))),(0,l.kt)("h2",{id:"min"},"Min"),(0,l.kt)("p",null,"If the value to validate is a number it will check to make sure it is equal to or greater than x. If the value is a string it will ensure the length of the string is at least x characters long."),(0,l.kt)("h3",{id:"params-1"},"Params"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minValue"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"The minimum value if the input is a number or the minimum length if a string is the value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customMessage"),(0,l.kt)("td",{parentName:"tr",align:null},"string, undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom message to override any validation errors.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { min } from 'super-validator'\n\nmin(5)\n// Or\nmin(5, 'Custom Error Message')\n")),(0,l.kt)("h3",{id:"notes"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the value is undefined or null this will not return a error. You should use required as well as this if you want to check if its not included.")),(0,l.kt)("h2",{id:"max"},"Max"),(0,l.kt)("p",null,"If the value to validate is a number it will check to make sure it is less than or equal to x. If the value is a string it will ensure the length of the string is not longer than x."),(0,l.kt)("h3",{id:"params-2"},"Params"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxValue"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum value the input can be if the value is a number or the maximum length if a string is the value")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customMessage"),(0,l.kt)("td",{parentName:"tr",align:null},"string, undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom message to override any validation errors.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { max } from 'super-validator'\n\nmax(5)\n// Or\nmax(5, 'Custom Error Message')\n")),(0,l.kt)("h3",{id:"notes-1"},"Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the value is undefined or null this will not return a error. You should use required as well as this if you want to check if its not included.")),(0,l.kt)("h2",{id:"typeof"},"TypeOf"),(0,l.kt)("p",null,"If the value to validate is a number it will check to make sure it is less than or equal to x. If the value is a string it will ensure the length of the string is not longer than x."),(0,l.kt)("h3",{id:"params-3"},"Params"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The type the value should be. If the value has a type of anything else it will return a error.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customMessage"),(0,l.kt)("td",{parentName:"tr",align:null},"string, undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom message to override any validation errors.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { typeOf } from 'super-validator'\n\ntypeOf('string')\n// Or\ntypeOf('string', 'Custom Error Message')\n")),(0,l.kt)("h2",{id:"equals"},"Equals"),(0,l.kt)("p",null,"Checks if the value is equal to another this can be used with both strict and non strict checks."),(0,l.kt)("h3",{id:"params-4"},"Params"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"toMatch"),(0,l.kt)("td",{parentName:"tr",align:null},"unknown"),(0,l.kt)("td",{parentName:"tr",align:null},"The object to match to the value provided."),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strict"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"If we should use strict equals or not. (This should be true in most cases.)"),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"customMessage"),(0,l.kt)("td",{parentName:"tr",align:null},"string, undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom message to override any validation errors."),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"import { equal } from 'super-validator'\n\nequal(true)\n// Or\nequal('test')\n// Or\nequal(6)\n// Or\nequal(null, false)\n// Or\ntypeOf('test', true, 'Custom Error Message')\n")))}p.isMDXComponent=!0}}]);